from leetcode.python.gcd_strings_1071.solution_1071 import gcd_of_strings, is_a_string_divisor

class Test1071:
    def test_case_one(self):
        res = gcd_of_strings("ABCABC", "ABC")
        assert res == "ABC"

    def test_case_two(self):
        res = gcd_of_strings("ABABAB", "ABAB")
        assert res == "AB"

    def test_case_three(self):
        res = gcd_of_strings("LEET", "CODE")
        assert res == ""

    def test_case_four(self):
        res = gcd_of_strings("TAUXXTAUXXTAUXXTAUXXTAUXX", "TAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXXTAUXX")
        assert res == "TAUXX"

    def test_case_five(self):
        res = gcd_of_strings("ABABABAB", "ABAB")
        assert res == "ABAB"

    def test_case_six(self):
        res = gcd_of_strings("ABCABCABC", "ABCAAA")
        assert res == ""

    def test_case_seven(self):
        res = gcd_of_strings("REQAGELREQAGELREQAGELREQAGELREQAGEL", "REQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGEL")
        assert res == "REQAGEL"
    
    def test_case_eight(self):
        assert is_a_string_divisor("REQAGELREQAGELREQAGELREQAGELREQAGEL", "REQAGEL")
        assert is_a_string_divisor("REQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGELREQAGEL", "REQAGEL")

    def test_case_nine(self):
        res = gcd_of_strings
        assert res == "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"

    def test_case_ten(self):
        assert is_a_string_divisor("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        assert is_a_string_divisor
